// -------------------------------------------------------------------------- //
  // Script to get the 5 warmest days of LST from MODIS datasets for a given 
// month and aggregate it to the CMG grid (0.05 dd). 
//
  // G. Duveiller, Mark Pickering September 2020.
// -------------------------------------------------------------------------- //
  
  
  // These should be made to iterate
var year_start = 2011; var year_end = 2019;
var start_month = 1; var end_month = 12; // 7-12 or 1-6
var mm_list = [31,28,31,30,31,30,31,31,30,31,30,31]

// set scaling parametrization 
var scl_fctr = 5; // a bit arbitrary... i.e. how many times 0.01 (we could improve)
var scl_d = 0.01 * scl_fctr; 
var scl_m = 1113.1949079327358 * scl_fctr; // first number represents 0.01dd


// define domain of interest (should be expanded)
var domain = ee.Geometry.Polygon({
  coords: [[-180, -89], [180, -89], [180, 89], [-180, 89]], //  coords: [[-180, -89], [180, -89], [180, 89], [-180, 89]],
  geodesic: false});

// Get a palette: a list of hex strings
var palettes = require('users/gena/packages:palettes');
var pal_magma = palettes.matplotlib.magma[7];
var pal_accent = palettes.colorbrewer.Accent[4];
var pal_viridis = palettes.matplotlib.viridis[7];

// mask LST according to the quality flag (but this should be refined)
var mask_lst = function(image) {
  var QA = image.select('QC_Day');
  var mask = QA.eq(0)
  .or(QA.eq(8))
  .or(QA.eq(73))
  .or(QA.eq(89))
  .or(QA.eq(17))
  .or(QA.eq(65))
  .or(QA.eq(81));
  return image.select('LST_Day_1km').updateMask(mask).multiply(0.02);
};

print('lst_col:', lst_col.first());

//var emptyImage = ee.Image([]);
for(var year=year_start; year<= year_end; year++) { 
  // blank image collection for each year and each alb_type etc    ///converto from image collection to multiband image for downloading purpose
  var multibandImage = ee.Image([]);
  var multibandImageArray = ee.Image([]);
  
  for(var month=start_month; month<= end_month; month++) { 
    print('month : ', month);
    // Needed to filter per month... perhaps better way to include 31st
    var start_date = ee.Date.fromYMD(year, month, 1);
    var end_date = ee.Date.fromYMD(year, month, mm_list[month-1]);
    
    
    // Get the data
    var lst_sel = lst_col.filterDate(start_date, end_date)
    .select('LST_Day_1km', 'QC_Day');
    
    // apply mask
    var lst_sel_masked = lst_sel.map(mask_lst);
    
    //Map.addLayer(  lst_sel_masked.first(), {min: 270, max: 320, palette: pal_magma}, 'lst_sel_masked');
    
    // Turn the collection into an ArrayImage
    var array_col = lst_sel_masked.toArray();
    print('array_col:', array_col);
    
    // Retain only the first column (LST) and sort it
    var array_sorted = array_col.arraySlice(1, 0, 1).arraySort();
    print('array_sorted:', array_sorted);
    
    // count the number of LST values in this month
    var array_count = array_sorted.arrayReduce({
      reducer: ee.Reducer.count(), 
      axes: [0]
    }).arrayProject([0]).arrayFlatten([['LST_count']]);
    print('array_count:', array_count);
    //Map.addLayer(array_count, {min: 0, max: 20, palette: pal_viridis}, 'array_count');
    
    
    // get the last 5 records, out of a maximum of 32 (i.e. larger than a month)
    var array_max5 = array_sorted.arraySlice(0,-5,32);
    print('array_max5:', array_max5);
    
    //print('mm_list: ', mm_list)
    //var mm_list_array = mm_list.toArray();
    //print('mm_list_array', mm_list_array)
    //var array_test_slice = mm_list.arraySlice(0,-5,13)
    //print('array_test_slice:', array_test_slice);
    
    // make a mean of this and export as a mean
    var lst_max5_mean = array_max5.arrayReduce({
      reducer: ee.Reducer.mean(), 
      axes: [0]
    }).arrayProject([0]).arrayFlatten([['LST_max5_mean']]);
    
    print('lst_max5_mean:', lst_max5_mean);
    //Map.addLayer(lst_max5_mean, {min: 270, max: 320, palette: pal_magma}, 'lst_max5_mean');
    
    
    
    // get projection
    var baseProj = lst_sel.first().projection();
    print('baseProj',baseProj);
    
    
    // // make monthly composite
    // var lst_composite = lst_sel_masked
    //     .reduce(ee.Reducer.mean());
    // print('lst_composite',lst_composite);
    // Map.addLayer(  lst_composite, {min: 270, max: 320, palette: pal_magma}, 'lst_mean');
    
    // reproject lst_max5_mean
    var lst_max5_mean_reprj = lst_max5_mean.reproject(baseProj);
    // get projection
    var compProj = lst_max5_mean.projection();
    print('compProj',compProj);
    // get projection
    var compProj2 = lst_max5_mean_reprj.projection();
    print('compProj2',compProj2);
    
    //reproject array_count
    // get projection
    var array_count_reprj = array_count.reproject(baseProj);
    var compProj = array_count.projection();
    print('compProj',compProj);
    // get projection
    var compProj2 = array_count_reprj.projection();
    print('compProj2',compProj2);
    
    
    // aggregated to coarser spatial resolution
    var lst_max5_mean_agr = lst_max5_mean_reprj
    .reduceResolution(ee.Reducer.mean(), false, 65536) 
    .reproject(ee.Projection('EPSG:4326').scale(scl_d, scl_d)).updateMask(1);
    var array_count_agr = array_count_reprj
    .reduceResolution(ee.Reducer.mean(), false, 65536) 
    .reproject(ee.Projection('EPSG:4326').scale(scl_d, scl_d)).updateMask(1);
    
    print('LST for ' + year + ' and month ', + month + ' at ' + scl_d + 'dd', lst_max5_mean_agr);
    //Map.addLayer(lst_max5_mean_agr, {min: 270, max: 320, palette: pal_magma}, 
                   //'LST ' + year + ' and ' + month + ' at ' + scl_d +'dd');
    
    // do the same for the array of LST counts
    print('array count of LST entries for ' + year + ' and month ', + month + ' at ' + scl_d + 'dd', lst_max5_mean_agr);
    //Map.addLayer(array_count_agr, {min: 0, max: 30, palette: pal_magma}, 
                   //'LST entries ' + year + ' and ' + month + ' at ' + scl_d +'dd');
    
    // scale it by 10 as an int (100 cuts of final result)
    multibandImage = multibandImage.addBands( (lst_max5_mean_agr.multiply(10)).int16() )
    multibandImageArray = multibandImageArray.addBands( array_count_agr.int16() )
  } // end month loop
  print('year complete');
  
  print('multiband_image',multibandImage)
  print('multiband_imagearray',multibandImageArray)
  
  // export
  Export.image.toDrive({
    image: multibandImage,
    folder:'GEE/F4P/',
    region:domain,
    crs: 'EPSG:4326',
    //description: 'lst' + '_scl' + scl_fctr + '_' + year + '_M' + month,
    description: 'lst_' + 'scl' + scl_fctr + '_' + year + '_' + start_month + '-' + end_month + '_x10int16',
    maxPixels: 1e13,
    scale: scl_m 
  });
  
  // export array containing the counts
  Export.image.toDrive({
      image: multibandImageArray,
      folder:'GEE/F4P/',
      region:domain,
      crs: 'EPSG:4326',
      //description: 'lst' + '_scl' + scl_fctr + '_' + year + '_M' + month,
     description: 'lstEntries_' + 'scl' + scl_fctr + '_' + year + '_' + start_month + '-' + end_month ,
      maxPixels: 1e13,
      scale: scl_m 
    });
  
}

print('year loop complete');

