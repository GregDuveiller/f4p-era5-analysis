gry2 <- 'grey30'  # <-- the edges of the points
gry3 <- 'grey45'  # <-- the smoothed path
# overall plot of the situation
g <- ggplot(df_r %>% filter(case == caseID)) +
geom_hline(yintercept = 0, colour = gry1) +
geom_vline(xintercept = 0, colour = gry1) +
geom_path(data = df_s %>% filter(case == caseID),
aes(x = x, y = y, colour = t), size = 2, show.legend = F) +
geom_point(aes(x = x, y = y, fill = monthS),
colour = gry2, stroke = 0.4, shape = 21, size = 2) +
geom_errorbar(data = df_m %>% filter(case == caseID),
aes(x = x_mu, ymin = y_mu - y_sd, ymax = y_mu + y_sd),
colour = gry2,  width = ebarwidth) +
geom_errorbarh(data = df_m %>% filter(case == caseID),
aes(y = y_mu, xmin = x_mu - x_sd, xmax = x_mu + x_sd),
colour = gry2,  height = ebarheight) +
geom_point(data = df_m %>% filter(case == caseID),
aes(x = x_mu, y = y_mu, fill = monthS),
colour = gry2, stroke = 0.3, shape = 21, size = 4) +
scale_fill_gradientn('', colours = cols, breaks = 1:12, labels = month.abb) +
scale_colour_gradientn('', colours = cols, breaks = 1:12, labels = month.abb) +
scale_y_continuous(paste('Bias in', varname, '(ERA - obs)')) +
scale_x_continuous('Bias in LAI (ERA - obs)') +
ggtitle(label = paste0('Hysteresis pattern between bias in LAI and bias in ', varname)) +
lgd
g_map <- ggplot(df_climspace_bin %>%
filter(t2.clim.bin == case_list[[caseID]]$t2.bin.val &
sm.clim.bin == case_list[[caseID]]$sm.bin.val)) +
geom_sf(data = land, fill = gry1, colour = NA) +
geom_tile(aes(x = x, y = y), fill = 'black') +
coord_sf(expand = F) +
ggtitle(label = paste0('Climate zone:\n ', case_list[[caseID]]$case_longname)) +
theme(plot.title = element_text(hjust = 0.5),
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
panel.border = element_rect(colour = gry2, fill = NA))
g + inset_element(g_map, 0.05, 0.05, 0.6, 0.3)
}
g1 <- plot.case(caseID = 'A', varname = 'LST')
g2 <- plot.case(caseID = 'B', varname = 'LST')
g <- g1 + g2 + plot_layout(guides = "collect") & theme(legend.position = 'left')
# plotting details, in case not inherited...
if(exists('fig.path') != T){ fig.path <- 'paper/figures/'}
if(exists('fig.fmt') != T){ fig.fmt <- 'png'}
dir.create(path = fig.path, recursive = T, showWarnings = F)
fig.name <- 'hystereris_demo'
g <- g1 + g2 + plot_layout(guides = "collect") & theme(legend.position = 'left')
ggsave(filename = paste0(fig.name, '.', fig.fmt),
path = fig.path, width = 12, height = 6)
g_map <- ggplot(df_climspace_bin %>%
filter(t2.clim.bin == case_list[[caseID]]$t2.bin.val &
sm.clim.bin == case_list[[caseID]]$sm.bin.val)) +
geom_sf(data = land, fill = gry1, colour = NA) +
geom_tile(aes(x = x, y = y), fill = 'black') +
coord_sf(expand = F) +
# ggtitle(label = paste0('For climate zone:\n ', case_list[[caseID]]$case_longname)) +
ggtitle(label = 'For climate zone:', subtitle = case_list[[caseID]]$case_longname) +
theme(plot.title = element_text(hjust = 0.5),
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
panel.border = element_rect(colour = gry2, fill = NA))
g_map
g_map <- ggplot(df_climspace_bin %>%
filter(t2.clim.bin == case_list[[caseID]]$t2.bin.val &
sm.clim.bin == case_list[[caseID]]$sm.bin.val)) +
geom_sf(data = land, fill = gry1, colour = NA) +
geom_tile(aes(x = x, y = y), fill = 'black') +
coord_sf(expand = F) +
# ggtitle(label = paste0('For climate zone:\n ', case_list[[caseID]]$case_longname)) +
ggtitle(label = 'For climate zone:', subtitle = case_list[[caseID]]$case_longname) +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
panel.border = element_rect(colour = gry2, fill = NA))
g + inset_element(g_map, 0.05, 0.05, 0.6, 0.3)
source("~/work/workspace/f4p-era5-analysis/code/making_figures_for_paper/plot_hyst_demo.R")
source("~/work/workspace/f4p-era5-analysis/code/making_figures_for_paper/plot_hyst_demo.R")
source("~/work/workspace/f4p-era5-analysis/code/making_figures_for_paper/plot_hyst_demo.R")
source("~/work/workspace/f4p-era5-analysis/code/making_figures_for_paper/plot_hyst_demo.R")
# define different cases to showcase
case_list <- list(
A = list(t2.bin.val = "26", sm.bin.val = "0.24",
case_longname = "24 < T2M <= 28 | 0.22 < SM <= 0.26 ",
map_pos = c(0.05, 0.05, 0.6, 0.4)),
B = list(t2.bin.val =  "6", sm.bin.val = "0.44",
case_longname = "4 < T2M <= 8 | 0.42 < SM <=0.46",
map_pos = c(0.05, 0.05+0.5, 0.6, 0.4 +0.5)))
case_list
pos <- case_list[[caseID]]$map_pos
pos
debugSource("~/work/workspace/f4p-era5-analysis/code/making_figures_for_paper/plot_hyst_demo.R")
c
c
Q
Q
source("~/work/workspace/f4p-era5-analysis/code/making_figures_for_paper/plot_hyst_demo.R")
source("~/work/workspace/f4p-era5-analysis/code/making_figures_for_paper/plot_hyst_demo.R")
source("~/work/workspace/f4p-era5-analysis/code/making_figures_for_paper/plot_hyst_demo.R")
source("~/work/workspace/f4p-era5-analysis/code/making_figures_for_paper/plot_hyst_demo.R")
source("~/work/workspace/f4p-era5-analysis/code/making_figures_for_paper/plot_hyst_demo.R")
df_p_all
source("~/work/workspace/f4p-era5-analysis/code/harvesting_data_for_final_figures/prepare_gislayers_for_maps.R")
source("~/work/workspace/f4p-era5-analysis/code/making_figures_for_paper/plot_hyst_demo.R")
source("~/work/workspace/f4p-era5-analysis/code/making_figures_for_paper/plot_hyst_demo.R")
source("~/work/workspace/f4p-era5-analysis/code/making_figures_for_paper/plot_hyst_demo.R")
source("~/work/workspace/f4p-era5-analysis/code/making_figures_for_paper/plot_hyst_demo.R")
source("~/work/workspace/f4p-era5-analysis/code/making_figures_for_paper/plot_hyst_demo.R")
source("~/work/workspace/f4p-era5-analysis/code/making_figures_for_paper/plot_hyst_demo.R")
source("~/work/workspace/f4p-era5-analysis/code/making_figures_for_paper/plot_hyst_demo.R")
source("~/work/workspace/f4p-era5-analysis/code/making_figures_for_paper/plot_hyst_demo.R")
g <- g1 + g2 + plot_layout(guides = "collect") &
theme(legend.position = 'left') +
plot_annotation(title = 'Hysteresis patterns between bias in LAI and bias in LST for different climates')
ggsave(filename = paste0(fig.name, '.', fig.fmt),
path = fig.path, width = 12, height = 6)
g <- g1 + g2 + plot_layout(guides = "collect") &
theme(legend.position = 'left') +
plot_annotation(title = element_text('Hysteresis patterns between bias in LAI and bias in LST for different climates'))
ggsave(filename = paste0(fig.name, '.', fig.fmt),
path = fig.path, width = 12, height = 6)
g <- g1 + g2 + plot_layout(guides = "collect")  +
plot_annotation(title = element_text('Hysteresis patterns between bias in LAI and bias in LST for different climates'))&
theme(legend.position = 'left')
ggsave(filename = paste0(fig.name, '.', fig.fmt),
path = fig.path, width = 12, height = 6)
g <- g1 + g2 + plot_layout(guides = "collect")  +
plot_annotation(title = element_text('Hysteresis patterns between bias in LAI and bias in LST for different climates')) &
theme(legend.position = 'left')
ggsave(filename = paste0(fig.name, '.', fig.fmt),
path = fig.path, width = 12, height = 6)
source("~/work/workspace/f4p-era5-analysis/code/making_figures_for_paper/plot_hyst_demo.R")
ebarwidth
ebarheight
if(varname == 'LST'){ ebarheight <- 0.5 }
ebarheight
ebarheight <- 0.5
source("~/work/workspace/f4p-era5-analysis/code/making_figures_for_paper/plot_hyst_demo.R")
source("~/work/workspace/f4p-era5-analysis/code/making_figures_for_paper/plot_hyst_demo.R")
source("~/work/workspace/f4p-era5-analysis/code/making_figures_for_paper/plot_hyst_demo.R")
source("~/work/workspace/f4p-era5-analysis/code/making_figures_for_paper/plot_hyst_demo.R")
source("~/work/workspace/f4p-era5-analysis/code/making_figures_for_paper/plot_hyst_demo.R")
source("~/work/workspace/f4p-era5-analysis/code/making_figures_for_paper/plot_hyst_demo.R")
source("~/work/workspace/f4p-era5-analysis/code/making_figures_for_paper/plot_hyst_demo.R")
source("~/work/workspace/f4p-era5-analysis/code/making_figures_for_paper/plot_hyst_demo.R")
source("~/work/workspace/f4p-era5-analysis/code/making_figures_for_paper/plot_hyst_demo.R")
source("~/work/workspace/f4p-era5-analysis/code/making_figures_for_paper/plot_hyst_demo.R")
source("~/work/workspace/f4p-era5-analysis/code/making_figures_for_paper/plot_hyst_demo.R")
source("~/work/workspace/f4p-era5-analysis/code/making_figures_for_paper/plot_hyst_demo.R")
source("~/work/workspace/f4p-era5-analysis/code/making_figures_for_paper/plot_hyst_demo.R")
g
source("~/work/workspace/f4p-era5-analysis/code/making_figures_for_paper/plot_hyst_demo.R")
source("~/work/workspace/f4p-era5-analysis/code/making_figures_for_paper/plot_hyst_demo.R")
source("~/work/workspace/f4p-era5-analysis/code/making_figures_for_paper/plot_hyst_demo.R")
source("~/work/workspace/f4p-era5-analysis/code/making_figures_for_paper/plot_hyst_demo.R")
source("~/work/workspace/f4p-era5-analysis/code/making_figures_for_paper/plot_hyst_demo.R")
source("~/work/workspace/f4p-era5-analysis/code/making_figures_for_paper/plot_hyst_demo.R")
source("~/work/workspace/f4p-era5-analysis/code/making_figures_for_paper/plot_hyst_demo.R")
source("~/work/workspace/f4p-era5-analysis/code/making_figures_for_paper/plot_hyst_demo.R")
source("~/work/workspace/f4p-era5-analysis/code/making_figures_for_paper/plot_hyst_demo.R")
source("~/work/workspace/f4p-era5-analysis/code/making_figures_for_paper/plot_hyst_demo.R")
g <- g1 + g2 + plot_layout(guides = "collect")  +
plot_annotation(
title = 'Examples of hysteresis patterns between biases in LAI and biases in LST for different climates',
subtitle = '[LAI obs from GEOV2/AVHRR, LST obs from on MYD11A1, model data from ERA5-Land]',
tag_levels = 'a') &
theme(legend.position = 'left')
g
source("~/work/workspace/f4p-era5-analysis/code/making_figures_for_paper/plot_hyst_demo.R")
g1
g2
g1 + g2 + plot_layout(guides = "collect")  +
plot_annotation(
title = 'Examples of hysteresis patterns between biases in LAI and biases in LST for different climates',
subtitle = '[LAI obs from GEOV2/AVHRR, LST obs from on MYD11A1, model data from ERA5-Land]',
tag_levels = 'a')
g1 + g2 + plot_layout(guides = "collect")  +
plot_annotation(
title = 'Examples of hysteresis patterns between biases in LAI and biases in LST for different climates',
subtitle = '[LAI obs from GEOV2/AVHRR, LST obs from on MYD11A1, model data from ERA5-Land]',
tag_levels = c('a', 'b'))
g <- g2 + g1 + plot_layout(guides = "collect")  +
plot_annotation(
title = 'Examples of hysteresis patterns between biases in LAI and biases in LST for different climates',
subtitle = '[LAI obs from GEOV2/AVHRR, LST obs from on MYD11A1, model data from ERA5-Land]',
tag_levels = c('a', 'b')) &
theme(legend.position = 'left')
g
g <- g1 + g2 + plot_layout(guides = "collect", tag_level = 'new')  +
plot_annotation(
title = 'Examples of hysteresis patterns between biases in LAI and biases in LST for different climates',
subtitle = '[LAI obs from GEOV2/AVHRR, LST obs from on MYD11A1, model data from ERA5-Land]',
tag_levels = 'a') &
theme(legend.position = 'left')
g
source("~/work/workspace/f4p-era5-analysis/code/making_figures_for_paper/plot_hyst_demo.R")
# prepare data for climzones
source("code/harvesting_data_for_final_figures/prepare_climzones.R")
source("code/harvesting_data_for_final_figures/prepare_data_per_clim_bin.R")
# prepare data for hysteresis analysis
source("code/harvesting_data_for_final_figures/prepare_hysteresis_dimensions.R")
load('data/input_data/climate_space/df_climspace_t2xsm.RData') # <---- df_climspace
load('data/final_data/figures_for_paper/hysteresis_data_ready4fig.RData', verbose = T)
# prepare data for hysteresis analysis
source("code/harvesting_data_for_final_figures/prepare_hysteresis_per_bin.R")
source("code/harvesting_data_for_final_figures/prepare_hysteresis_dimensions.R")
load('data/input_data/climate_space/df_climspace_t2xsm.RData') # <---- df_climspace
source("code/harvesting_data_for_final_figures/prepare_hysteresis_dimensions.R")
# prepare data for ...
source("code/harvesting_data_for_final_figures/prepare_data_for_bias_and_cor_summaries.R")
source("code/harvesting_data_for_final_figures/prepare_bias_vs_temp_anomalies.R")
# prepare data for heatwave analysis
source("code/harvesting_data_for_final_figures/prepare_gislayers_for_maps.R")
source("code/harvesting_data_for_final_figures/prepare_data_for_heatwave_maps.R")
gc()
source("code/harvesting_data_for_final_figures/prepare_heatwave_summary_stats.R")
######     SET LIBRARIES                      #####
library(chron) # useful for converting time values
library(dplyr) # use %>%
require(tidyr)
######     GLOBAL VARS                        #####
start_year <- 2003 ; end_year <- 2018   # select time period to consider
v_month <- c(8)                      # select months we want to consider in analysis
v_lon_min <- -12 ; v_lon_max <- 58  ; v_lat_min <- 36 ; v_lat_max <- 71 # reduce area of interest
# output_root  <- '/media/mark/HD/Mark/Mark_COPERNICUS/figures/COPERNICUSII_V3/'
output_path <- 'data/final_data/figures_for_paper/'
print(paste0('output_path is : ', output_path ))
if(! dir.exists(output_path)) {dir.create(paste0(output_path), recursive = T)}
###################################################
######     LOAD DATA - PART1 - LARGE FILES    #####
###################################################
# load LAI data - then reduce to cz of interest, and add the LST
# to consider for paper (within Europe)
v_cz_in <- c('Dfc', 'Dfb', 'Csa', 'Csb', 'Cfa', 'Cfb') # 'Dfc' 'Dfb' 'Csa' 'Csb' 'Cfa' 'Cfb'
# load clim zones
load('data/inter_data/ancillary_info/df_KG_climatezones.RData')  # <---- df_cz
# load('/home/mark/ownCloud/copernicus/scripts/KG_class/Map_KG-Global/df_KG_climatezones.RData')  # <---- df_cz
summary(df_cz,30)
df_cz <- as.data.frame(df_cz)
df_cz <- df_cz[,c(1,2,4)]
input_dir <- 'data/inter_data/df_comb_obs_vs_sim/'
# input_dir <- '/media/mark/HD/Mark/Mark_COPERNICUS/data/COPERNICUSII_V3/greg_workspace/MP_workspace/'
input_file <- 'df_comb___LAI.RData'
load(paste0(input_dir, input_file))
df_comb <- left_join(df_comb, df_cz)
df_comb <- df_comb %>%
filter(x >= v_lon_min  & x <= v_lon_max) %>%
filter(y >= v_lat_min & y <= v_lat_max)
df <- df_comb %>% mutate(monthS = ifelse(sign(y) < 0, (month + 6) %% 12, month) ) %>%
mutate(monthS = ifelse(monthS == 0, 12, monthS))
df <-  df %>% filter(year >= start_year & year <= end_year & monthS %in%  v_month) %>%
filter( cz_name %in% v_cz_in)
rm(df_comb)
# df <- df_comb %>% filter(cz_name == cz_select)
df <- df[,c(1,2,7,3,4,8,5,6)]
input_file <- 'df_comb___LST.RData'
load(paste0(input_dir, input_file))
# convert temperatures kelvin to celcius
if(input_file == 'df_comb___LST.RData' ){
print('convert kelvin to celcius')
df_comb <- df_comb %>% mutate(obs = obs - 273.15)
df_comb <- df_comb %>% mutate(sim = sim - 273.15)
}
df <- left_join(df, df_comb, by = c('x','y','year',"month"), suffix = c('.LAI', '.LST'))
# head(df)
# summary(df)
rm(df_comb)
# get multiyear average for each pixel per month
df_avg <- df %>% group_by(x,y, monthS) %>%
summarise( obs_mean.LAI = mean(obs.LAI, na.rm = T),
sim_mean.LAI = mean(sim.LAI, na.rm = T),
obs_mean.LST = mean(obs.LST, na.rm = T),
sim_mean.LST = mean(sim.LST, na.rm = T),
# obs_mean.E   = mean(obs.E  , na.rm = T),
# sim_mean.E   = mean(sim.E  , na.rm = T),
# obs_mean.albedo_wsa_vis = mean(obs.albedo_wsa_vis, na.rm = T),
# sim_mean.albedo_wsa_vis = mean(sim.albedo_wsa_vis, na.rm = T)
)
df <- left_join(df, df_avg, by = c('x','y',"monthS"))
# NOTE: percentage change in 'C temperature doesn't make sense (unless K)
df <- df %>% mutate(diff_sim_obs.LAI  =  (sim.LAI - obs.LAI),                      # raw difference ERA5-sat LAI
diff_obs_mean.LAI =  (obs.LAI - obs_mean.LAI),                 # raw difference obs - LT mean LAI
diff_sim_mean.LAI =  (sim.LAI - sim_mean.LAI),                 # raw difference sim - LT mean LAI
diff_sim_obs.LST  =  (sim.LST - obs.LST),                      # raw difference ERA5-sat LST
diff_obs_mean.LST =  (obs.LST - obs_mean.LST),                 # raw difference obs - LT mean LST
diff_sim_mean.LST =  (sim.LST - sim_mean.LST),                 # raw difference sim - LT mean LST
# diff_sim_obs.E  =  (sim.E - obs.E),                      # raw difference ERA5-sat E
# diff_obs_mean.E =  (obs.E - obs_mean.E),                 # raw difference obs - LT mean E
# diff_sim_mean.E =  (sim.E - sim_mean.E),                 # raw difference sim - LT mean E
#
# diff_sim_obs.albedo_wsa_vis  =  (sim.albedo_wsa_vis - obs.albedo_wsa_vis),                      # raw difference ERA5-sat albedo_wsa_vis
# diff_obs_mean.albedo_wsa_vis =  (obs.albedo_wsa_vis - obs_mean.albedo_wsa_vis),                 # raw difference obs - LT mean albedo_wsa_vis
# diff_sim_mean.albedo_wsa_vis =  (sim.albedo_wsa_vis - sim_mean.albedo_wsa_vis),                 # raw difference sim - LT mean albedo_wsa_vis
)
# input a data frame and make a divide columns q_col_name_x and q_col_name_y, into quantiles (0:quantile_max)/quantile_div in the column, q_col_name_quantile.
# For each quantile of q_col_name_quantile, we will have the mean_x mean_y (and up/down ribbons), mean Q and xy correlation/slope/lm parameters
# can also get ribbon column which shows an 'error bound' of where the data lies with e.g. ribbon_size = +/-0.25 for a bound containing 50% of data
# here we group by quantile && climate zone
f_summarise_byQuantile <- function(df_in, v_quantiles , q_col_name_x , q_col_name_y , q_col_name_quantile, ribbon_size = 0.0 ){
# if only number 1 entered for quantiles then set v_quantiles such that there is only a single quantile (i.e an average of all data is taken)
if(v_quantiles == 1){v_quantiles <- c(0,1)}
df_in <- df_in %>% filter(!is.na(!!as.symbol(q_col_name_y)))
df_in <- df_in %>% filter(!is.na(!!as.symbol(q_col_name_x)))
df_in <- df_in %>% filter(!is.na(!!as.symbol(q_col_name_quantile)))
df_quantile <- df_in %>% mutate( quantile = as.integer(cut(!!as.symbol(q_col_name_quantile), quantile(!!as.symbol(q_col_name_quantile), probs= v_quantiles, na.rm = FALSE), include.lowest=TRUE)))
#ggplot(df_quantile, aes(quantile)) + geom_histogram(fill='blue', alpha=0.5) + scale_x_continuous(limits = c(0,11), oob = scales::squish)
#average the quantiles
# get the mean value of each quantile, as well as ribbon values (if_required) - these ribbon values are the upper and lower e.g. 25% around the mean - can be treated as an uncertainty wrapping e.g. 50% of data points
df_quantile <- df_quantile %>% group_by(quantile) %>%
summarise(
mean_value_X  = median( !!as.symbol(q_col_name_x) , na.rm= T),               # mean value of x
# ribbon_value_X_up  = quantile( !!as.symbol(q_col_name_x) , probs = (0.5+ribbon_size) , na.rm= T ), # upper quantile of ribbon_size around the mean_x
# ribbon_value_X_down  = quantile( !!as.symbol(q_col_name_x) , probs = (0.5-ribbon_size) , na.rm= T ), # upper quantile of ribbon_size around the mean_x
mean_value_Y  = median( !!as.symbol(q_col_name_y) , na.rm= T),
# ribbon_value_Y_up  = quantile( !!as.symbol(q_col_name_y) , probs = (0.5+ribbon_size) , na.rm= T ), # upper quantile of ribbon_size around the mean_x
# ribbon_value_Y_down  = quantile( !!as.symbol(q_col_name_y) , probs = (0.5-ribbon_size) , na.rm= T ), # upper quantile of ribbon_size around the mean_x
mean_value_Q  = mean( !!as.symbol(q_col_name_quantile), na.rm= T),
)
return(df_quantile)
}
v_variables <- c('diff_sim_obs.LST')  # this is the list of variables we want to compare along the y_axis (e.g. LST, E, albedo)
x_variable = 'diff_sim_obs.LAI'          # This is the x-axis varaible (generally LAI ERA5-sat)
v_quant <- (0:10)/10  # this gives 10ths
variable_quantile <- 'diff_obs_mean.LST' # this is the column that we get the quantiles of (e.g. quantiles of temperature relative to long term mean)
df_all <- data.frame() # this takes the quantile values of each LAI-var bias
df_all_avg <- data.frame() # this gets the average bias across all quantiles
######
# loop over climate zones and summarise by quantile the LAI and var biases
for (cz_i in v_cz_in){ # cz_i <- v_cz_in[4]
print(cz_i)
df_temp <- df %>% filter(cz_name == cz_i)
#loop over the climate variables (LST, SM etc)
for (v_i in v_variables){ # v_i <- v_variables[1]
print(v_i)
df_sum <- f_summarise_byQuantile(df_temp, v_quantiles = v_quant, q_col_name_x = x_variable , q_col_name_y = v_i , q_col_name_quantile = variable_quantile, ribbon_size = 0.25 )  # get the
df_avg <- f_summarise_byQuantile(df_temp, v_quantiles = 1, q_col_name_x = x_variable , q_col_name_y = v_i , q_col_name_quantile = variable_quantile, ribbon_size = 0.25 )        # get the average of all data
df_sum$cz <- cz_i     ;    df_avg$cz <- cz_i
df_sum$y_var <- v_i   ;    df_avg$y_var <- v_i
df_all <- rbind(df_all, df_sum)
df_all_avg <- rbind(df_all_avg, df_avg)
} # end loop over variables
} # end climate loop
v_cz_in
print(cz_i)
cz_i
df_temp <- df %>% filter(cz_name == cz_i)
df_temp
v_variables
v_i
v_i
print(v_i)
df_sum <- f_summarise_byQuantile(df_temp, v_quantiles = v_quant, q_col_name_x = x_variable , q_col_name_y = v_i , q_col_name_quantile = variable_quantile, ribbon_size = 0.25 )  # get the
f_summarise_byQuantile
df_sum <- f_summarise_byQuantile(df_temp, v_quantiles = v_quant, q_col_name_x = x_variable , q_col_name_y = v_i , q_col_name_quantile = variable_quantile, ribbon_size = 0.25 )  # get the
df_avg <- f_summarise_byQuantile(df_temp, v_quantiles = 1, q_col_name_x = x_variable , q_col_name_y = v_i , q_col_name_quantile = variable_quantile, ribbon_size = 0.25 )        # get the average of all data
df_sum$cz <- cz_i     ;    df_avg$cz <- cz_i
df_sum$y_var <- v_i   ;    df_avg$y_var <- v_i
df_all <- rbind(df_all, df_sum)
df_all_avg <- rbind(df_all_avg, df_avg)
cz_i
v_cz_in
v_quantiles
f_summarise_byQuantile <- function(df_in, v_quantiles , q_col_name_x , q_col_name_y , q_col_name_quantile, ribbon_size = 0.0 ){
# if only number 1 entered for quantiles then set v_quantiles such that there is only a single quantile (i.e an average of all data is taken)
if(v_quantiles == 1){v_quantiles <- c(0,1)}
df_in <- df_in %>% filter(!is.na(!!as.symbol(q_col_name_y)))
df_in <- df_in %>% filter(!is.na(!!as.symbol(q_col_name_x)))
df_in <- df_in %>% filter(!is.na(!!as.symbol(q_col_name_quantile)))
df_quantile <- df_in %>% mutate( quantile = as.integer(cut(!!as.symbol(q_col_name_quantile), quantile(!!as.symbol(q_col_name_quantile), probs= v_quantiles, na.rm = FALSE), include.lowest=TRUE)))
#ggplot(df_quantile, aes(quantile)) + geom_histogram(fill='blue', alpha=0.5) + scale_x_continuous(limits = c(0,11), oob = scales::squish)
#average the quantiles
# get the mean value of each quantile, as well as ribbon values (if_required) - these ribbon values are the upper and lower e.g. 25% around the mean - can be treated as an uncertainty wrapping e.g. 50% of data points
df_quantile <- df_quantile %>% group_by(quantile) %>%
summarise(
mean_value_X  = median( !!as.symbol(q_col_name_x) , na.rm= T),               # mean value of x
# ribbon_value_X_up  = quantile( !!as.symbol(q_col_name_x) , probs = (0.5+ribbon_size) , na.rm= T ), # upper quantile of ribbon_size around the mean_x
# ribbon_value_X_down  = quantile( !!as.symbol(q_col_name_x) , probs = (0.5-ribbon_size) , na.rm= T ), # upper quantile of ribbon_size around the mean_x
mean_value_Y  = median( !!as.symbol(q_col_name_y) , na.rm= T),
# ribbon_value_Y_up  = quantile( !!as.symbol(q_col_name_y) , probs = (0.5+ribbon_size) , na.rm= T ), # upper quantile of ribbon_size around the mean_x
# ribbon_value_Y_down  = quantile( !!as.symbol(q_col_name_y) , probs = (0.5-ribbon_size) , na.rm= T ), # upper quantile of ribbon_size around the mean_x
mean_value_Q  = mean( !!as.symbol(q_col_name_quantile), na.rm= T),
)
return(df_quantile)
}
v_quant
q_col_name_x
x_variable
v_i
q_col_name_y = v_
q_col_name_y = v_i
q_col_name_quantile = variable_quantile
ribbon_size = 0.25
v_quantiles = v_quant
q_col_name_x = x_variable
df_in <- df_temp
v_quantiles
v_quantiles
# if only number 1 entered for quantiles then set v_quantiles such that there is only a single quantile (i.e an average of all data is taken)
if(v_quantiles == 1){v_quantiles <- c(0,1)}
# input a data frame and make a divide columns q_col_name_x and q_col_name_y, into quantiles (0:quantile_max)/quantile_div in the column, q_col_name_quantile.
# For each quantile of q_col_name_quantile, we will have the mean_x mean_y (and up/down ribbons), mean Q and xy correlation/slope/lm parameters
# can also get ribbon column which shows an 'error bound' of where the data lies with e.g. ribbon_size = +/-0.25 for a bound containing 50% of data
# here we group by quantile && climate zone
f_summarise_byQuantile <- function(df_in, v_quantiles , q_col_name_x , q_col_name_y , q_col_name_quantile, ribbon_size = 0.0 ){
# if only number 1 entered for quantiles then set v_quantiles such that there is only a single quantile (i.e an average of all data is taken)
#if(v_quantiles == 1){v_quantiles <- c(0,1)}
df_in <- df_in %>% filter(!is.na(!!as.symbol(q_col_name_y)))
df_in <- df_in %>% filter(!is.na(!!as.symbol(q_col_name_x)))
df_in <- df_in %>% filter(!is.na(!!as.symbol(q_col_name_quantile)))
df_quantile <- df_in %>% mutate( quantile = as.integer(cut(!!as.symbol(q_col_name_quantile), quantile(!!as.symbol(q_col_name_quantile), probs= v_quantiles, na.rm = FALSE), include.lowest=TRUE)))
#ggplot(df_quantile, aes(quantile)) + geom_histogram(fill='blue', alpha=0.5) + scale_x_continuous(limits = c(0,11), oob = scales::squish)
#average the quantiles
# get the mean value of each quantile, as well as ribbon values (if_required) - these ribbon values are the upper and lower e.g. 25% around the mean - can be treated as an uncertainty wrapping e.g. 50% of data points
df_quantile <- df_quantile %>% group_by(quantile) %>%
summarise(
mean_value_X  = median( !!as.symbol(q_col_name_x) , na.rm= T),               # mean value of x
# ribbon_value_X_up  = quantile( !!as.symbol(q_col_name_x) , probs = (0.5+ribbon_size) , na.rm= T ), # upper quantile of ribbon_size around the mean_x
# ribbon_value_X_down  = quantile( !!as.symbol(q_col_name_x) , probs = (0.5-ribbon_size) , na.rm= T ), # upper quantile of ribbon_size around the mean_x
mean_value_Y  = median( !!as.symbol(q_col_name_y) , na.rm= T),
# ribbon_value_Y_up  = quantile( !!as.symbol(q_col_name_y) , probs = (0.5+ribbon_size) , na.rm= T ), # upper quantile of ribbon_size around the mean_x
# ribbon_value_Y_down  = quantile( !!as.symbol(q_col_name_y) , probs = (0.5-ribbon_size) , na.rm= T ), # upper quantile of ribbon_size around the mean_x
mean_value_Q  = mean( !!as.symbol(q_col_name_quantile), na.rm= T),
)
return(df_quantile)
}
df_sum <- f_summarise_byQuantile(df_temp, v_quantiles = v_quant, q_col_name_x = x_variable , q_col_name_y = v_i , q_col_name_quantile = variable_quantile, ribbon_size = 0.25 )  # get the
df_avg <- f_summarise_byQuantile(df_temp, v_quantiles = 1, q_col_name_x = x_variable , q_col_name_y = v_i , q_col_name_quantile = variable_quantile, ribbon_size = 0.25 )        # get the average of all data
df_sum$cz <- cz_i     ;    df_avg$cz <- cz_i
df_sum$y_var <- v_i   ;    df_avg$y_var <- v_i
df_all <- rbind(df_all, df_sum)
df_all_avg <- rbind(df_all_avg, df_avg)
# input a data frame and make a divide columns q_col_name_x and q_col_name_y, into quantiles (0:quantile_max)/quantile_div in the column, q_col_name_quantile.
# For each quantile of q_col_name_quantile, we will have the mean_x mean_y (and up/down ribbons), mean Q and xy correlation/slope/lm parameters
# can also get ribbon column which shows an 'error bound' of where the data lies with e.g. ribbon_size = +/-0.25 for a bound containing 50% of data
# here we group by quantile && climate zone
f_summarise_byQuantile <- function(df_in, v_quantiles , q_col_name_x , q_col_name_y , q_col_name_quantile, ribbon_size = 0.0 ){
# if only number 1 entered for quantiles then set v_quantiles such that there is only a single quantile (i.e an average of all data is taken)
#if(v_quantiles == 1){v_quantiles <- c(0,1)}
df_in <- df_in %>% filter(!is.na(!!as.symbol(q_col_name_y)))
df_in <- df_in %>% filter(!is.na(!!as.symbol(q_col_name_x)))
df_in <- df_in %>% filter(!is.na(!!as.symbol(q_col_name_quantile)))
df_quantile <- df_in %>% mutate( quantile = as.integer(cut(!!as.symbol(q_col_name_quantile), quantile(!!as.symbol(q_col_name_quantile), probs= v_quantiles, na.rm = FALSE), include.lowest=TRUE)))
#ggplot(df_quantile, aes(quantile)) + geom_histogram(fill='blue', alpha=0.5) + scale_x_continuous(limits = c(0,11), oob = scales::squish)
#average the quantiles
# get the mean value of each quantile, as well as ribbon values (if_required) - these ribbon values are the upper and lower e.g. 25% around the mean - can be treated as an uncertainty wrapping e.g. 50% of data points
df_quantile <- df_quantile %>% group_by(quantile) %>%
summarise(
mean_value_X  = median( !!as.symbol(q_col_name_x) , na.rm= T),               # mean value of x
# ribbon_value_X_up  = quantile( !!as.symbol(q_col_name_x) , probs = (0.5+ribbon_size) , na.rm= T ), # upper quantile of ribbon_size around the mean_x
# ribbon_value_X_down  = quantile( !!as.symbol(q_col_name_x) , probs = (0.5-ribbon_size) , na.rm= T ), # upper quantile of ribbon_size around the mean_x
mean_value_Y  = median( !!as.symbol(q_col_name_y) , na.rm= T),
# ribbon_value_Y_up  = quantile( !!as.symbol(q_col_name_y) , probs = (0.5+ribbon_size) , na.rm= T ), # upper quantile of ribbon_size around the mean_x
# ribbon_value_Y_down  = quantile( !!as.symbol(q_col_name_y) , probs = (0.5-ribbon_size) , na.rm= T ), # upper quantile of ribbon_size around the mean_x
mean_value_Q  = mean( !!as.symbol(q_col_name_quantile), na.rm= T),
)
return(df_quantile)
}
v_variables <- c('diff_sim_obs.LST')  # this is the list of variables we want to compare along the y_axis (e.g. LST, E, albedo)
x_variable = 'diff_sim_obs.LAI'          # This is the x-axis varaible (generally LAI ERA5-sat)
v_quant <- (0:10)/10  # this gives 10ths
variable_quantile <- 'diff_obs_mean.LST' # this is the column that we get the quantiles of (e.g. quantiles of temperature relative to long term mean)
df_all <- data.frame() # this takes the quantile values of each LAI-var bias
df_all_avg <- data.frame() # this gets the average bias across all quantiles
######
# loop over climate zones and summarise by quantile the LAI and var biases
for (cz_i in v_cz_in){ # cz_i <- v_cz_in[4]
print(cz_i)
df_temp <- df %>% filter(cz_name == cz_i)
#loop over the climate variables (LST, SM etc)
for (v_i in v_variables){ # v_i <- v_variables[1]
print(v_i)
df_sum <- f_summarise_byQuantile(df_temp, v_quantiles = v_quant, q_col_name_x = x_variable , q_col_name_y = v_i , q_col_name_quantile = variable_quantile, ribbon_size = 0.25 )  # get the
df_avg <- f_summarise_byQuantile(df_temp, v_quantiles = 1, q_col_name_x = x_variable , q_col_name_y = v_i , q_col_name_quantile = variable_quantile, ribbon_size = 0.25 )        # get the average of all data
df_sum$cz <- cz_i     ;    df_avg$cz <- cz_i
df_sum$y_var <- v_i   ;    df_avg$y_var <- v_i
df_all <- rbind(df_all, df_sum)
df_all_avg <- rbind(df_all_avg, df_avg)
} # end loop over variables
} # end climate loop
df_all$cz <- factor(df_all$cz)
df_all_avg$cz <- factor(df_all_avg$cz)
df_all$y_var <- factor(df_all$y_var)
# so now there is a dataframe where - for each CZ in Europe and for each LST anomaly quantile (with mean mean LST anomaly temperature), we have:  the mean LAI bias, mean LST bias
# this is done for all August European pixels from 2003-2018
df_all <- as.data.frame(df_all)
# # OPTIONAL - centre the dataframe so we remove the average August ERA5-sat bias and only see the variation due to heatwaves
# # centre the dataframe by removing the average bias to view only the bias due to heatwaves
# names(df_all_avg)[1:11] <- paste0(names(df_all_avg)[1:11], '.avg')
# df_all <- df_all %>% left_join(df_all_avg)
# df_all <- df_all %>% mutate( mean_value_Y_centred = mean_value_Y - mean_value_Y.avg,
#                              mean_value_X_centred = mean_value_X - mean_value_X.avg,
#                              mean_value_Q_centred = mean_value_Q - mean_value_Q.avg
# )
# summary(df_all)
#### final step - relabel the axes (these are pre-programmed and should fit the step above)
df_all <- df_all %>%
reshape(idvar = c('quantile','cz'), varying = c('mean_value_X', 'mean_value_Y'),
v.names = c("value"), timevar = 'y_var',
times = c("LAI","LST"),
# times=c("LAI bias [m2/m2]","LST bias [C]"),
new.row.names = 1:1000, direction = "long")
names(df_all)[1] <- 'LST_anomaly_quantile'
names(df_all)[2] <- 'LST_anomaly_value'
names(df_all)[3] <- 'cz_name'
names(df_all)[4] <- 'y_var'
names(df_all)[5] <- 'bias'
gc()
source("code/harvesting_data_for_final_figures/prepare_bias_vs_temp_anomalies.R")  # <--- problem
source("~/work/workspace/f4p-era5-analysis/code/making_figures_for_paper/master_script_make_all_figures.R")
